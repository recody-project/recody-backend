<?xml version="1.0" encoding="UTF-8"?>
<!-- 60초마다 설정 파일의 변경을 확인 하여 변경시 갱신 -->
<configuration scan="true" scanPeriod="60 seconds" packagingData="true">

    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>

    <!--springProfile 태그를 사용하면 logback 설정파일에서 복수개의 프로파일을 설정할 수 있다.-->
    <springProfile name="test">
        <property resource="env.test.properties"/>
    </springProfile>
    <springProfile name="local">
        <property resource="env.local.properties"/>
    </springProfile>
    <springProfile name="dev">
        <property resource="env.dev.properties"/>
    </springProfile>
    <springProfile name="prod">
        <property resource="env.prod.properties"/>
    </springProfile>

    <property name="AWS_ACCESS_KEY" value="${infra.aws.credentials.accessKey}"/>
    <property name="AWS_SECRET_KEY" value="${infra.aws.credentials.secretKey}"/>
    <property name="CLOUD_WATCH_LOG_GROUP" value="${infra.aws.cloud-watch.log-group}"/>
    <property name="CLOUD_WATCH_LOG_PREFIX" value="${infra.aws.cloud-watch.log-stream-prefix}"/>

    <property name="LOG_PATH" value="${log.config.path}"/>
    <property name="LOG_FILE_NAME" value="${log.config.filename}"/>
    <property name="ERR_LOG_FILE_NAME" value="error_${log.config.filename}_log"/>
    <!-- 기본 스프링 부트 로그 패턴을 가져옴. -->
    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN}"/>
    <property name="FILE_LOG_PATTERN" value="${FILE_LOG_PATTERN}"/>


    <!-- Console Appender -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
        </encoder>
    </appender>


    <!-- File Appender -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 파일경로 설정 -->
        <file>${LOG_PATH}/${LOG_FILE_NAME}.log</file>

        <!-- 출력패턴 설정-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>



        <!-- Rolling 정책 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축 -->
            <fileNamePattern>${LOG_PATH}/${LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 파일당 최고 용량 kb, mb, gb -->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거-->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>



    <!-- 에러의 경우 파일에 로그 처리 -->
    <appender name="Error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>error</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <file>${LOG_PATH}/${ERR_LOG_FILE_NAME}.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>


        <!-- Rolling 정책 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축 -->
            <fileNamePattern>${LOG_PATH}/${ERR_LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 파일당 최고 용량 kb, mb, gb -->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거-->
            <maxHistory>60</maxHistory>
        </rollingPolicy>
    </appender>



        <!-- Register the shutdown hook to allow logback to cleanly stop appenders -->
        <!-- this is strongly recommend when using AwsLogsAppender in async mode, -->
        <!-- to allow the queue to flush on exit -->

        <shutdownHook class="ch.qos.logback.core.hook.DelayingShutdownHook"/>

        <!-- Timestamp used into the Log Stream Name -->
        <timestamp key="timestamp" datePattern="yyyyMMddHHmmssSSS"/>

        <!-- The actual AwsLogsAppender (asynchronous mode because of maxFlushTimeMillis > 0) -->
        <appender name="ASYNC_AWS_LOGS" class="ca.pjer.logback.AwsLogsAppender">

            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>DEBUG</level>
            </filter>

            <layout>
                <pattern>${FILE_LOG_PATTERN}</pattern>
            </layout>
            <logGroupName>${CLOUD_WATCH_LOG_GROUP}</logGroupName>
            <logStreamUuidPrefix>${CLOUD_WATCH_LOG_PREFIX}</logStreamUuidPrefix>
            <logRegion>ap-northeast-2</logRegion>
            <maxBatchLogEvents>50</maxBatchLogEvents>
            <maxFlushTimeMillis>30000</maxFlushTimeMillis>
            <maxBlockTimeMillis>5000</maxBlockTimeMillis>
            <retentionTimeDays>0</retentionTimeDays>
            <accessKeyId>${AWS_ACCESS_KEY}</accessKeyId>
            <secretAccessKey>${AWS_SECRET_KEY}</secretAccessKey>
        </appender>




    <!-- root레벨 설정 -->
    <springProfile name="local">
        <root level="info">
            <appender-ref ref="CONSOLE"/>
        </root>
        <logger name="com.recody.recodybackend" additivity="false">
            <level value = "trace" />
            <appender-ref ref="CONSOLE"/>
        </logger>
        <logger name="com.recody.recodybackend.common.json" additivity="false">
            <level value = "info" />
            <appender-ref ref="CONSOLE"/>
        </logger>
    </springProfile>

    <springProfile name="test">
        <root level="debug">
            <appender-ref ref="CONSOLE"/>
        </root>
        <logger name="com.recody.recodybackend" additivity="false">
            <level value = "debug" />
            <appender-ref ref="CONSOLE"/>
        </logger>
        <logger name="com.recody.recodybackend.common.json" additivity="false">
            <level value = "info" />
            <appender-ref ref="CONSOLE"/>
        </logger>
    </springProfile>

    <springProfile name="dev">
        <root level="info">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="FILE"/>
            <appender-ref ref="Error"/>
            <appender-ref ref="ASYNC_AWS_LOGS"/>
        </root>
    </springProfile>

    <springProfile name="prod">
        <root level="info">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="FILE"/>
            <appender-ref ref="Error"/>
            <appender-ref ref="ASYNC_AWS_LOGS"/>
        </root>
    </springProfile>


    <!-- 특정패키지 로깅레벨 설정 -->
    <!-- yml 설정을 따름 -->
</configuration>