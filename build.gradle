plugins {
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'java'
    id "com.stehno.gradle.dependency-checker" version "0.2.3"
}

group = 'com.recody'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation project(":common")
    implementation project(":common-boot-utils")
    implementation project(":service-movie-impl")
    implementation project(":service-music-impl")
    implementation project(":service-catalog-impl")
    implementation project(":service-users-impl")

    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // aws log appender
    implementation "ca.pjer:logback-awslogs-appender:1.6.0"

    // actuator, prometheus for metrics
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-core'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    implementation 'com.google.code.findbugs:jsr305:3.0.2'
}

checkDependencies {
    configurations = ['compile','runtime']
}



tasks.named('test') {
    useJUnitPlatform()
}



allprojects {
    group = 'com.recody'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '11'
}

subprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'

    sourceCompatibility = '11' // 자바 버전 명시

    group = rootProject.group
    version = rootProject.version

    repositories {
        mavenCentral()
    }

    dependencies {
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }

    test {
        useJUnitPlatform()
    }

    task initSrouceFolders {
        sourceSets*.java.srcDirs*.each {
            if (!it.exists()) {
                it.mkdirs()
            }
        }
        sourceSets*.resources.srcDirs*.each {
            if (!it.exists()) {
                it.mkdirs()
            }
        }
    }

    task createProjectPackageStructure {
        String basePackageStructure = "src/main/java/com/recody/recodybackend"
        Directory baseProjectPackageStructure = layout.projectDirectory.dir(basePackageStructure)
        if (!baseProjectPackageStructure.asFile.exists()){
            mkdir(basePackageStructure)
        }
    }

    task createBuildGradle {
        String buildGradle = "build.gradle"
        def file = new File(projectDir, buildGradle)
        if (!file.exists()) {
            file.createNewFile()
        }
    }
}